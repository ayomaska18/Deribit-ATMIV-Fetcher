{
    "id": null,
    "uid": "crypto-dashboard",
    "title": "Crypto Dashboard",
    "tags": ["crypto", "atm_iv"],
    "timezone": "browser",
    "schemaVersion": 16,
    "version": 0,
    "refresh": "5s",
    "panels": [
      {
        "type": "timeseries",
        "title": "BTC ATM IV",
        "targets": [
          {
            "refId": "A",
            "datasource": "InfluxDB",
            "query": "from(bucket: \"test\") |> range(start: v.timeRangeStart, stop: v.timeRangeStop) |> filter(fn: (r) => r[\"_measurement\"] == \"atm_iv\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> filter(fn: (r) => r[\"currency\"] == \"BTC\") |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false) |> yield(name: \"mean\")",
            "format": "time_series"
          }
        ],
        "gridPos": {
          "h": 9,
          "w": 24,
          "x": 0,
          "y": 0
        }
      },
      {
        "type": "timeseries",
        "title": "ETH ATM IV",
        "targets": [
          {
            "refId": "B",
            "datasource": "InfluxDB",
            "query": "from(bucket: \"test\") |> range(start: v.timeRangeStart, stop: v.timeRangeStop) |> filter(fn: (r) => r[\"_measurement\"] == \"atm_iv\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> filter(fn: (r) => r[\"currency\"] == \"ETH\") |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false) |> yield(name: \"mean\")",
            "format": "time_series"
          }
        ],
        "gridPos": {
          "h": 9,
          "w": 24,
          "x": 0,
          "y": 9
        }
      },
      {
        "type": "timeseries",
        "title": "SOL ATM IV",
        "targets": [
          {
            "refId": "C",
            "datasource": "InfluxDB",
            "query": "from(bucket: \"test\") |> range(start: v.timeRangeStart, stop: v.timeRangeStop) |> filter(fn: (r) => r[\"_measurement\"] == \"atm_iv\") |> filter(fn: (r) => r[\"_field\"] == \"value\") |> filter(fn: (r) => r[\"currency\"] == \"SOL\") |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false) |> yield(name: \"mean\")",
            "format": "time_series"
          }
        ],
        "gridPos": {
          "h": 9,
          "w": 24,
          "x": 0,
          "y": 18
        }
      }
    ]
  }
  